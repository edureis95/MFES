package Hitori;

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Board {
  public static Number BOARD_SIZE = 8L;
  private Rules rules;
  private VDMMap board = MapUtil.map();
  private Object colorWhite = Hitori.quotes.WHITEQuote.getInstance();

  public void cg_init_Board_2(final Number s) {

    BOARD_SIZE = s;
    rules = new Rules();
    createBoard();
    setBlackCell();
    setNumbersUnpaintedCell();
    return;
  }

  public void cg_init_Board_1() {

    createBoard();
    return;
  }

  public Board() {

    cg_init_Board_1();
  }

  public Board(final Number s) {

    cg_init_Board_2(s);
  }

  public VDMMap getBoard() {

    return Utils.copy(board);
  }

  public void createBoard() {

    Cell.Coord c = null;
    Cell cell = null;
    for (Iterator iterator_15 = SetUtil.range(0L, Board.BOARD_SIZE.longValue() - 1L).iterator();
        iterator_15.hasNext();
        ) {
      Number i = (Number) iterator_15.next();
      for (Iterator iterator_16 = SetUtil.range(0L, Board.BOARD_SIZE.longValue() - 1L).iterator();
          iterator_16.hasNext();
          ) {
        Number j = (Number) iterator_16.next();
        c = new Cell.Coord(i, j);
        cell = new Cell(0L, Utils.copy(c));
        board = MapUtil.override(Utils.copy(board), MapUtil.map(new Maplet(Utils.copy(c), cell)));
      }
    }
  }

  public Cell getCellOfBoard(final Cell.Coord coord) {

    VDMMap mapCell = MapUtil.map();
    mapCell = MapUtil.domResTo(SetUtil.set(Utils.copy(coord)), Utils.copy(board));
    {
      Cell j = null;
      Boolean success_1 = false;
      VDMSet set_1 = MapUtil.rng(Utils.copy(mapCell));
      for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext() && !(success_1); ) {
        j = ((Cell) iterator_1.next());
        success_1 = true;
      }
      if (!(success_1)) {
        throw new RuntimeException("Let Be St found no applicable bindings");
      }

      {
        return j;
      }
    }
  }

  public void setCellOfBoard(final Cell.Coord coord, final Cell cell) {

    board = MapUtil.override(Utils.copy(board), MapUtil.map(new Maplet(Utils.copy(coord), cell)));
  }

  public void setBlackCell() {

    Number numberOfBlack = 1L;
    Number xRand = 0L;
    Number yRand = 0L;
    Boolean whileController = false;
    Cell cell = null;
    whileController = true;
    numberOfBlack = MATH.rand(2L).longValue() + 4L;
    for (Iterator iterator_17 = SetUtil.range(0L, numberOfBlack.longValue() - 1L).iterator();
        iterator_17.hasNext();
        ) {
      Number i = (Number) iterator_17.next();
      Boolean whileCond_1 = true;
      while (whileCond_1) {
        whileCond_1 = whileController;
        if (!(whileCond_1)) {
          break;
        }

        {
          xRand = MATH.rand(Board.BOARD_SIZE);
          yRand = MATH.rand(Board.BOARD_SIZE);
          Boolean andResult_2 = false;

          Boolean andResult_3 = false;

          Boolean orResult_1 = false;

          if (yRand.longValue() < 1L) {
            orResult_1 = true;
          } else {
            orResult_1 =
                Utils.equals(
                    getCellOfBoard(new Cell.Coord(xRand, yRand.longValue() - 1L)).color,
                    Hitori.quotes.WHITEQuote.getInstance());
          }

          if (orResult_1) {
            Boolean andResult_4 = false;

            Boolean orResult_2 = false;

            if (yRand.longValue() + 1L >= Board.BOARD_SIZE.longValue()) {
              orResult_2 = true;
            } else {
              orResult_2 =
                  Utils.equals(
                      getCellOfBoard(new Cell.Coord(xRand, yRand.longValue() + 1L)).color,
                      Hitori.quotes.WHITEQuote.getInstance());
            }

            if (orResult_2) {
              Boolean andResult_5 = false;

              Boolean orResult_3 = false;

              if (xRand.longValue() < 1L) {
                orResult_3 = true;
              } else {
                orResult_3 =
                    Utils.equals(
                        getCellOfBoard(new Cell.Coord(xRand.longValue() - 1L, yRand)).color,
                        Hitori.quotes.WHITEQuote.getInstance());
              }

              if (orResult_3) {
                Boolean orResult_4 = false;

                if (xRand.longValue() + 1L >= Board.BOARD_SIZE.longValue()) {
                  orResult_4 = true;
                } else {
                  orResult_4 =
                      Utils.equals(
                          getCellOfBoard(new Cell.Coord(xRand.longValue() + 1L, yRand)).color,
                          Hitori.quotes.WHITEQuote.getInstance());
                }

                if (orResult_4) {
                  andResult_5 = true;
                }
              }

              if (andResult_5) {
                andResult_4 = true;
              }
            }

            if (andResult_4) {
              andResult_3 = true;
            }
          }

          if (andResult_3) {
            if (Utils.equals(
                getCellOfBoard(new Cell.Coord(xRand, yRand)).color,
                Hitori.quotes.WHITEQuote.getInstance())) {
              andResult_2 = true;
            }
          }

          if (andResult_2) {
            whileController = false;
          }
        }
      }

      whileController = true;
      cell = getCellOfBoard(new Cell.Coord(xRand, yRand));
      cell.color = Hitori.quotes.BLACKQuote.getInstance();
      setCellOfBoard(new Cell.Coord(xRand, yRand), cell);
    }
    Boolean orResult_5 = false;

    if (!(Utils.equals(rules.checkRule1(Utils.copy(board), Board.BOARD_SIZE), true))) {
      orResult_5 = true;
    } else {
      orResult_5 = !(Utils.equals(rules.checkRule2(Utils.copy(board), Board.BOARD_SIZE), true));
    }

    if (orResult_5) {
      createBoard();
      setBlackCell();
      return;
    }
  }

  public void setNumbersUnpaintedCell() {

    Number number = 0L;
    Cell cell = null;
    VDMSet possibleNumbers = SetUtil.range(1L, Board.BOARD_SIZE);
    VDMMap rowFlag = MapUtil.map();
    VDMMap columnFlag = MapUtil.map();
    VDMMap flag = MapUtil.map();
    Boolean whileController = true;
    for (Iterator iterator_18 = possibleNumbers.iterator(); iterator_18.hasNext(); ) {
      Number i = (Number) iterator_18.next();
      columnFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(i, 0L)));
      rowFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(i, 0L)));
    }
    Boolean whileCond_2 = true;
    while (whileCond_2) {
      whileCond_2 = whileController;
      if (!(whileCond_2)) {
        break;
      }

      {
        for (Iterator iterator_19 = SetUtil.range(0L, Board.BOARD_SIZE.longValue() - 1L).iterator();
            iterator_19.hasNext();
            ) {
          Number i = (Number) iterator_19.next();
          for (Iterator iterator_20 = MapUtil.rng(Utils.copy(board)).iterator();
              iterator_20.hasNext();
              ) {
            Cell j = (Cell) iterator_20.next();
            if (Utils.equals(j.color, Hitori.quotes.WHITEQuote.getInstance())) {
              if (Utils.equals(j.getCoord().x, i)) {
                number = MATH.rand(Board.BOARD_SIZE).longValue() + 1L;
                cell = j;
                cell.number = number;
                setCellOfBoard(j.getCoord(), cell);
                flag = MapUtil.domResTo(SetUtil.set(j.number), Utils.copy(columnFlag));
                {
                  Number k = null;
                  Boolean success_2 = false;
                  VDMSet set_2 = MapUtil.rng(Utils.copy(flag));
                  for (Iterator iterator_2 = set_2.iterator();
                      iterator_2.hasNext() && !(success_2);
                      ) {
                    k = ((Number) iterator_2.next());
                    success_2 = true;
                  }
                  if (!(success_2)) {
                    throw new RuntimeException("Let Be St found no applicable bindings");
                  }

                  {
                    if (Utils.equals(k, 1L)) {
                      whileController = true;
                      /* skip */

                    }
                  }
                }

                flag = MapUtil.map();
                columnFlag =
                    MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(j.number, 1L)));
              }
            }
          }
          columnFlag = MapUtil.map();
          for (Iterator iterator_21 = possibleNumbers.iterator(); iterator_21.hasNext(); ) {
            Number n = (Number) iterator_21.next();
            columnFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(n, 0L)));
          }
        }
        for (Iterator iterator_22 = SetUtil.range(0L, Board.BOARD_SIZE.longValue() - 1L).iterator();
            iterator_22.hasNext();
            ) {
          Number i = (Number) iterator_22.next();
          for (Iterator iterator_23 = MapUtil.rng(Utils.copy(board)).iterator();
              iterator_23.hasNext();
              ) {
            Cell j = (Cell) iterator_23.next();
            if (Utils.equals(j.color, Hitori.quotes.WHITEQuote.getInstance())) {
              if (Utils.equals(j.getCoord().y, i)) {
                number = MATH.rand(Board.BOARD_SIZE).longValue() + 1L;
                cell = j;
                cell.number = number;
                setCellOfBoard(j.getCoord(), cell);
                flag = MapUtil.domResTo(SetUtil.set(j.number), Utils.copy(rowFlag));
                {
                  Number k = null;
                  Boolean success_3 = false;
                  VDMSet set_3 = MapUtil.rng(Utils.copy(flag));
                  for (Iterator iterator_3 = set_3.iterator();
                      iterator_3.hasNext() && !(success_3);
                      ) {
                    k = ((Number) iterator_3.next());
                    success_3 = true;
                  }
                  if (!(success_3)) {
                    throw new RuntimeException("Let Be St found no applicable bindings");
                  }

                  {
                    if (Utils.equals(k, 1L)) {
                      whileController = true;
                      /* skip */

                    }
                  }
                }

                flag = MapUtil.map();
                rowFlag =
                    MapUtil.override(Utils.copy(rowFlag), MapUtil.map(new Maplet(j.number, 1L)));
              }
            }
          }
          rowFlag = MapUtil.map();
          for (Iterator iterator_24 = possibleNumbers.iterator(); iterator_24.hasNext(); ) {
            Number n = (Number) iterator_24.next();
            rowFlag = MapUtil.override(Utils.copy(rowFlag), MapUtil.map(new Maplet(n, 0L)));
          }
        }
        whileController = false;
      }
    }
  }

  public Number changeBoardNumbers() {

    for (Iterator iterator_25 = MapUtil.rng(Utils.copy(board)).iterator();
        iterator_25.hasNext();
        ) {
      Cell i = (Cell) iterator_25.next();
      Number x = 0L;
      Number y = 0L;
      Cell.Coord coord = null;
      VDMMap mapCell = MapUtil.map();
      Cell cell = null;
      x = i.getCoord().x;
      y = i.getCoord().y;
      coord = new Cell.Coord(x, y);
      cell = new Cell(4L, Utils.copy(coord));
      board = MapUtil.override(Utils.copy(board), MapUtil.map(new Maplet(Utils.copy(coord), cell)));
      mapCell = MapUtil.domResTo(SetUtil.set(Utils.copy(coord)), Utils.copy(board));
      {
        Cell j = null;
        Boolean success_4 = false;
        VDMSet set_4 = MapUtil.rng(Utils.copy(mapCell));
        for (Iterator iterator_4 = set_4.iterator(); iterator_4.hasNext() && !(success_4); ) {
          j = ((Cell) iterator_4.next());
          success_4 = true;
        }
        if (!(success_4)) {
          throw new RuntimeException("Let Be St found no applicable bindings");
        }

        {
          return j.getNumber();
        }
      }
    }
  }

  public String toString() {

    return "Board{"
        + "BOARD_SIZE := "
        + Utils.toString(BOARD_SIZE)
        + ", rules := "
        + Utils.toString(rules)
        + ", board := "
        + Utils.toString(board)
        + ", colorWhite := "
        + Utils.toString(colorWhite)
        + "}";
  }
}
