package Hitori;

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Rules {
  public void cg_init_Rules_1() {

    return;
  }

  public Rules() {

    cg_init_Rules_1();
  }

  public Boolean checkRule1(final VDMMap board, final Number size) {

    Cell cell = null;
    Cell.Coord coords = null;
    for (Iterator iterator_19 = MapUtil.rng(Utils.copy(board)).iterator();
        iterator_19.hasNext();
        ) {
      Cell i = (Cell) iterator_19.next();
      cell = i;
      coords = i.getCoord();
      Boolean andResult_6 = false;

      if (Utils.equals(cell.color, Hitori.quotes.BLACKQuote.getInstance())) {
        Boolean orResult_6 = false;

        Boolean andResult_7 = false;

        if (coords.x.longValue() < size.longValue() - 1L) {
          if (Utils.equals(
              getCellOfBoard(new Cell.Coord(coords.x.longValue() + 1L, coords.y), Utils.copy(board))
                  .color,
              Hitori.quotes.BLACKQuote.getInstance())) {
            andResult_7 = true;
          }
        }

        if (andResult_7) {
          orResult_6 = true;
        } else {
          Boolean orResult_7 = false;

          Boolean andResult_8 = false;

          if (coords.y.longValue() < size.longValue() - 1L) {
            if (Utils.equals(
                getCellOfBoard(
                        new Cell.Coord(coords.x, coords.y.longValue() + 1L), Utils.copy(board))
                    .color,
                Hitori.quotes.BLACKQuote.getInstance())) {
              andResult_8 = true;
            }
          }

          if (andResult_8) {
            orResult_7 = true;
          } else {
            Boolean orResult_8 = false;

            Boolean andResult_9 = false;

            if (coords.x.longValue() > 0L) {
              if (Utils.equals(
                  getCellOfBoard(
                          new Cell.Coord(coords.x.longValue() - 1L, coords.y), Utils.copy(board))
                      .color,
                  Hitori.quotes.BLACKQuote.getInstance())) {
                andResult_9 = true;
              }
            }

            if (andResult_9) {
              orResult_8 = true;
            } else {
              Boolean andResult_10 = false;

              if (coords.y.longValue() > 0L) {
                if (Utils.equals(
                    getCellOfBoard(
                            new Cell.Coord(coords.x, coords.y.longValue() - 1L), Utils.copy(board))
                        .color,
                    Hitori.quotes.BLACKQuote.getInstance())) {
                  andResult_10 = true;
                }
              }

              orResult_8 = andResult_10;
            }

            orResult_7 = orResult_8;
          }

          orResult_6 = orResult_7;
        }

        if (orResult_6) {
          andResult_6 = true;
        }
      }

      if (andResult_6) {
        return false;
      }
    }
    return true;
  }

  public Cell getCellOfBoard(final Cell.Coord coord, final VDMMap board) {

    VDMMap mapCell = MapUtil.map();
    mapCell = MapUtil.domResTo(SetUtil.set(Utils.copy(coord)), Utils.copy(board));
    {
      Cell j = null;
      Boolean success_3 = false;
      VDMSet set_3 = MapUtil.rng(Utils.copy(mapCell));
      for (Iterator iterator_3 = set_3.iterator(); iterator_3.hasNext() && !(success_3); ) {
        j = ((Cell) iterator_3.next());
        success_3 = true;
      }
      if (!(success_3)) {
        throw new RuntimeException("Let Be St found no applicable bindings");
      }

      {
        return j;
      }
    }
  }

  public Boolean checkRule2(final VDMMap board, final Number size) {

    VDMMap visited = MapUtil.map();
    Cell firstCell = null;
    Cell cellAnalyzing = null;
    Cell cellGoingToStack = null;
    Stack neighborsToAnalyze = new Stack(size.longValue() * size.longValue());
    for (Iterator iterator_20 = MapUtil.dom(Utils.copy(board)).iterator();
        iterator_20.hasNext();
        ) {
      Cell.Coord i = (Cell.Coord) iterator_20.next();
      visited = MapUtil.override(Utils.copy(visited), MapUtil.map(new Maplet(Utils.copy(i), 0L)));
    }
    for (Iterator iterator_21 = MapUtil.rng(Utils.copy(board)).iterator();
        iterator_21.hasNext();
        ) {
      Cell i = (Cell) iterator_21.next();
      if (Utils.equals(i.color, Hitori.quotes.WHITEQuote.getInstance())) {
        firstCell = i;
      }
    }
    neighborsToAnalyze.push(firstCell);
    Boolean whileCond_3 = true;
    while (whileCond_3) {
      whileCond_3 = neighborsToAnalyze.getContentsLen().longValue() > 0L;
      if (!(whileCond_3)) {
        break;
      }

      {
        VDMMap mapCellVisited = MapUtil.map();
        cellAnalyzing = neighborsToAnalyze.top();
        neighborsToAnalyze.pop();
        mapCellVisited =
            MapUtil.domResTo(SetUtil.set(cellAnalyzing.getCoord()), Utils.copy(visited));
        {
          Number j = null;
          Boolean success_4 = false;
          VDMSet set_4 = MapUtil.rng(Utils.copy(mapCellVisited));
          for (Iterator iterator_4 = set_4.iterator(); iterator_4.hasNext() && !(success_4); ) {
            j = ((Number) iterator_4.next());
            success_4 = true;
          }
          if (!(success_4)) {
            throw new RuntimeException("Let Be St found no applicable bindings");
          }

          {
            if (Utils.equals(j, 0L)) {
              visited =
                  MapUtil.override(
                      Utils.copy(visited), MapUtil.map(new Maplet(cellAnalyzing.getCoord(), 1L)));
              if (cellAnalyzing.getCoord().x.longValue() > 0L) {
                cellGoingToStack =
                    getCellOfBoard(
                        new Cell.Coord(
                            cellAnalyzing.getCoord().x.longValue() - 1L,
                            cellAnalyzing.getCoord().y),
                        Utils.copy(board));
                if (Utils.equals(cellGoingToStack.color, Hitori.quotes.WHITEQuote.getInstance())) {
                  mapCellVisited =
                      MapUtil.domResTo(
                          SetUtil.set(cellGoingToStack.getCoord()), Utils.copy(visited));
                  {
                    Number d = null;
                    Boolean success_5 = false;
                    VDMSet set_5 = MapUtil.rng(Utils.copy(mapCellVisited));
                    for (Iterator iterator_5 = set_5.iterator();
                        iterator_5.hasNext() && !(success_5);
                        ) {
                      d = ((Number) iterator_5.next());
                      success_5 = true;
                    }
                    if (!(success_5)) {
                      throw new RuntimeException("Let Be St found no applicable bindings");
                    }

                    {
                      if (Utils.equals(d, 0L)) {
                        neighborsToAnalyze.push(cellGoingToStack);
                      }
                    }
                  }
                }
              }

              if (cellAnalyzing.getCoord().y.longValue() > 0L) {
                cellGoingToStack =
                    getCellOfBoard(
                        new Cell.Coord(
                            cellAnalyzing.getCoord().x,
                            cellAnalyzing.getCoord().y.longValue() - 1L),
                        Utils.copy(board));
                if (Utils.equals(cellGoingToStack.color, Hitori.quotes.WHITEQuote.getInstance())) {
                  mapCellVisited =
                      MapUtil.domResTo(
                          SetUtil.set(cellGoingToStack.getCoord()), Utils.copy(visited));
                  {
                    Number d = null;
                    Boolean success_6 = false;
                    VDMSet set_6 = MapUtil.rng(Utils.copy(mapCellVisited));
                    for (Iterator iterator_6 = set_6.iterator();
                        iterator_6.hasNext() && !(success_6);
                        ) {
                      d = ((Number) iterator_6.next());
                      success_6 = true;
                    }
                    if (!(success_6)) {
                      throw new RuntimeException("Let Be St found no applicable bindings");
                    }

                    {
                      if (Utils.equals(d, 0L)) {
                        neighborsToAnalyze.push(cellGoingToStack);
                      }
                    }
                  }
                }
              }

              if (cellAnalyzing.getCoord().x.longValue() < size.longValue() - 1L) {
                cellGoingToStack =
                    getCellOfBoard(
                        new Cell.Coord(
                            cellAnalyzing.getCoord().x.longValue() + 1L,
                            cellAnalyzing.getCoord().y),
                        Utils.copy(board));
                if (Utils.equals(cellGoingToStack.color, Hitori.quotes.WHITEQuote.getInstance())) {
                  mapCellVisited =
                      MapUtil.domResTo(
                          SetUtil.set(cellGoingToStack.getCoord()), Utils.copy(visited));
                  {
                    Number d = null;
                    Boolean success_7 = false;
                    VDMSet set_7 = MapUtil.rng(Utils.copy(mapCellVisited));
                    for (Iterator iterator_7 = set_7.iterator();
                        iterator_7.hasNext() && !(success_7);
                        ) {
                      d = ((Number) iterator_7.next());
                      success_7 = true;
                    }
                    if (!(success_7)) {
                      throw new RuntimeException("Let Be St found no applicable bindings");
                    }

                    {
                      if (Utils.equals(d, 0L)) {
                        neighborsToAnalyze.push(cellGoingToStack);
                      }
                    }
                  }
                }
              }

              if (cellAnalyzing.getCoord().y.longValue() < size.longValue() - 1L) {
                cellGoingToStack =
                    getCellOfBoard(
                        new Cell.Coord(
                            cellAnalyzing.getCoord().x,
                            cellAnalyzing.getCoord().y.longValue() + 1L),
                        Utils.copy(board));
                if (Utils.equals(cellGoingToStack.color, Hitori.quotes.WHITEQuote.getInstance())) {
                  mapCellVisited =
                      MapUtil.domResTo(
                          SetUtil.set(cellGoingToStack.getCoord()), Utils.copy(visited));
                  {
                    Number d = null;
                    Boolean success_8 = false;
                    VDMSet set_8 = MapUtil.rng(Utils.copy(mapCellVisited));
                    for (Iterator iterator_8 = set_8.iterator();
                        iterator_8.hasNext() && !(success_8);
                        ) {
                      d = ((Number) iterator_8.next());
                      success_8 = true;
                    }
                    if (!(success_8)) {
                      throw new RuntimeException("Let Be St found no applicable bindings");
                    }

                    {
                      if (Utils.equals(d, 0L)) {
                        neighborsToAnalyze.push(cellGoingToStack);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    for (Iterator iterator_22 = MapUtil.rng(Utils.copy(board)).iterator();
        iterator_22.hasNext();
        ) {
      Cell i = (Cell) iterator_22.next();
      VDMMap mapCellVisited = MapUtil.map();
      if (Utils.equals(i.color, Hitori.quotes.WHITEQuote.getInstance())) {
        mapCellVisited = MapUtil.domResTo(SetUtil.set(i.getCoord()), Utils.copy(visited));
        {
          Number j = null;
          Boolean success_9 = false;
          VDMSet set_9 = MapUtil.rng(Utils.copy(mapCellVisited));
          for (Iterator iterator_9 = set_9.iterator(); iterator_9.hasNext() && !(success_9); ) {
            j = ((Number) iterator_9.next());
            success_9 = true;
          }
          if (!(success_9)) {
            throw new RuntimeException("Let Be St found no applicable bindings");
          }

          {
            if (Utils.equals(j, 0L)) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }

  public Boolean checkRule3(final VDMMap board, final Number size) {

    VDMSet possibleNumbers = SetUtil.range(1L, size + 10L);
    VDMMap columnFlag = MapUtil.map();
    VDMMap rowFlag = MapUtil.map();
    VDMMap flag = MapUtil.map();
    for (Iterator iterator_23 = possibleNumbers.iterator(); iterator_23.hasNext(); ) {
      Number i = (Number) iterator_23.next();
      columnFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(i, 0L)));
      rowFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(i, 0L)));
    }
    for (Iterator iterator_24 = SetUtil.range(0L, size.longValue() - 1L).iterator();
        iterator_24.hasNext();
        ) {
      Number i = (Number) iterator_24.next();
      for (Iterator iterator_25 = MapUtil.rng(Utils.copy(board)).iterator();
          iterator_25.hasNext();
          ) {
        Cell j = (Cell) iterator_25.next();
        if (Utils.equals(j.color, Hitori.quotes.WHITEQuote.getInstance())) {
          if (Utils.equals(j.getCoord().x, i)) {
            flag = MapUtil.domResTo(SetUtil.set(j.number), Utils.copy(columnFlag));
            {
              Number k = null;
              Boolean success_10 = false;
              VDMSet set_10 = MapUtil.rng(Utils.copy(flag));
              for (Iterator iterator_10 = set_10.iterator();
                  iterator_10.hasNext() && !(success_10);
                  ) {
                k = ((Number) iterator_10.next());
                success_10 = true;
              }
              if (!(success_10)) {
                throw new RuntimeException("Let Be St found no applicable bindings");
              }

              {
                if (Utils.equals(k, 1L)) {
                  return false;
                }
              }
            }

            flag = MapUtil.map();
            columnFlag =
                MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(j.number, 1L)));
          }
        }
      }
      columnFlag = MapUtil.map();
      for (Iterator iterator_26 = possibleNumbers.iterator(); iterator_26.hasNext(); ) {
        Number n = (Number) iterator_26.next();
        columnFlag = MapUtil.override(Utils.copy(columnFlag), MapUtil.map(new Maplet(n, 0L)));
      }
    }
    for (Iterator iterator_27 = SetUtil.range(0L, size.longValue() - 1L).iterator();
        iterator_27.hasNext();
        ) {
      Number i = (Number) iterator_27.next();
      for (Iterator iterator_28 = MapUtil.rng(Utils.copy(board)).iterator();
          iterator_28.hasNext();
          ) {
        Cell j = (Cell) iterator_28.next();
        if (Utils.equals(j.color, Hitori.quotes.WHITEQuote.getInstance())) {
          if (Utils.equals(j.getCoord().y, i)) {
            flag = MapUtil.domResTo(SetUtil.set(j.number), Utils.copy(rowFlag));
            {
              Number k = null;
              Boolean success_11 = false;
              VDMSet set_11 = MapUtil.rng(Utils.copy(flag));
              for (Iterator iterator_11 = set_11.iterator();
                  iterator_11.hasNext() && !(success_11);
                  ) {
                k = ((Number) iterator_11.next());
                success_11 = true;
              }
              if (!(success_11)) {
                throw new RuntimeException("Let Be St found no applicable bindings");
              }

              {
                if (Utils.equals(k, 1L)) {
                  return false;
                }
              }
            }

            flag = MapUtil.map();
            rowFlag = MapUtil.override(Utils.copy(rowFlag), MapUtil.map(new Maplet(j.number, 1L)));
          }
        }
      }
      rowFlag = MapUtil.map();
      for (Iterator iterator_29 = possibleNumbers.iterator(); iterator_29.hasNext(); ) {
        Number n = (Number) iterator_29.next();
        rowFlag = MapUtil.override(Utils.copy(rowFlag), MapUtil.map(new Maplet(n, 0L)));
      }
    }
    return true;
  }

  public String toString() {

    return "Rules{}";
  }
}
